{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\nconst fetchFromLocalStorage = () => {\n  let cart = localStorage.getItem('cart');\n\n  if (cart) {\n    return JSON.parse(localStorage.getItem('cart'));\n  } else {\n    return [];\n  }\n};\n\nconst storeInLocalStorage = data => {\n  localStorage.setItem('cart', JSON.stringify(data));\n};\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    data: fetchFromLocalStorage(),\n    totalItems: 0,\n    totalAmount: 0,\n    deliveryCharge: 1000\n  },\n  reducers: {\n    addToCart(state, action) {\n      const tempItem = state.data.find(item => item.id === action.payload.id);\n\n      if (tempItem) {\n        const tempCart = state.data.map(item => {\n          if (item.id === action.payload.id) {\n            let newQty = item.quantity + action.payload.quantity;\n            let newTotalPrice = newQty * item.price;\n            return { ...item,\n              quantity: newQty,\n              totalPrice: newTotalPrice\n            };\n          } else {\n            return item;\n          }\n        });\n        state.data = tempCart;\n        storeInLocalStorage(state.data);\n      } else {\n        state.data.push(action.payload);\n        storeInLocalStorage(state.data);\n      }\n    },\n\n    removeFromCart(state, action) {\n      const tempCart = state.data.filter(item => item.id !== action.payload);\n      state.data = tempCart;\n      storeInLocalStorage(state.data);\n    },\n\n    clearCart(state) {\n      state.data = [];\n      storeInLocalStorage(state.data);\n    },\n\n    toggleCartQty(state, action) {\n      const tempCart = state.data.map(item => {\n        if (item.id === action.payload.id) {\n          let tempQty = item.quantity;\n          let tempTotalPrice = item.totalPrice;\n\n          if (action.payload.type === \"INC\") {\n            tempQty++;\n            tempTotalPrice = tempQty * item.price;\n            tempTotalPrice = item.totalPrice;\n          }\n\n          if (action.payload.type === \"DEC\") {\n            tempQty--;\n            if (tempQty < 1) tempQty = 1;\n            tempTotalPrice = tempQty * item.price;\n            let tempTotalPrice = item.totalPrice;\n          }\n\n          return { ...item,\n            quantity: tempQty,\n            totalPrice: tempTotalPrice\n          };\n        } else {\n          return item;\n        }\n      });\n      state.data = tempCart;\n      storeInLocalStorage(state.data);\n    },\n\n    // Recalculate totalAmount and totalItems\n    getCartTotal(state) {\n      state.totalAmount = state.data.reduce((cartTotal, cartItem) => {\n        return cartTotal += cartItem.totalPrice;\n      }, 0);\n      state.totalItems = state.data.length;\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  toggleCartQty,\n  getCartTotal,\n  clearCart,\n  setCartTotal\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","fetchFromLocalStorage","cart","localStorage","getItem","JSON","parse","storeInLocalStorage","data","setItem","stringify","cartSlice","name","initialState","totalItems","totalAmount","deliveryCharge","reducers","addToCart","state","action","tempItem","find","item","id","payload","tempCart","map","newQty","quantity","newTotalPrice","price","totalPrice","push","removeFromCart","filter","clearCart","toggleCartQty","tempQty","tempTotalPrice","type","getCartTotal","reduce","cartTotal","cartItem","length","setCartTotal","actions","reducer"],"sources":["D:/0020-UOKcs/Year 1/Semester 2/CSCI 12063 - Web Programming/pinsara/Ecommerce-react-Webapp/src/store/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst fetchFromLocalStorage = () => {\r\n    let cart = localStorage.getItem('cart');\r\n    if(cart){\r\n        return JSON.parse(localStorage.getItem('cart'))\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nconst storeInLocalStorage = (data) => {\r\n    localStorage.setItem('cart', JSON.stringify(data))\r\n}\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        data: fetchFromLocalStorage(),\r\n        totalItems: 0,\r\n        totalAmount: 0,\r\n        deliveryCharge: 1000\r\n    }, \r\n    reducers: {\r\n        addToCart(state, action){\r\n            const tempItem = state.data.find(item => item.id === action.payload.id);\r\n            if(tempItem){\r\n                const tempCart = state.data.map(item => {\r\n                    if(item.id === action.payload.id){\r\n                        let newQty = item.quantity + action.payload.quantity;\r\n                        let newTotalPrice = newQty * item.price;\r\n                        return { ...item, quantity: newQty, totalPrice: newTotalPrice };\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                });\r\n                state.data = tempCart;\r\n                storeInLocalStorage(state.data);\r\n            } else {\r\n                state.data.push(action.payload);\r\n                storeInLocalStorage(state.data);\r\n            }\r\n        },\r\n        removeFromCart(state, action){\r\n            const tempCart = state.data.filter(item => item.id !== action.payload);\r\n            state.data = tempCart;\r\n            storeInLocalStorage(state.data);\r\n        },\r\n        clearCart(state){\r\n            state.data = [];\r\n            storeInLocalStorage(state.data);\r\n        },\r\n        toggleCartQty(state, action){\r\n            const tempCart = state.data.map(item => {\r\n                if(item.id === action.payload.id){\r\n                    let tempQty = item.quantity;\r\n                    let tempTotalPrice = item.totalPrice;\r\n                    if(action.payload.type === \"INC\"){\r\n                        tempQty++;\r\n                        tempTotalPrice = tempQty * item.price;\r\n                        tempTotalPrice = item.totalPrice;\r\n                    }\r\n                    if(action.payload.type === \"DEC\"){\r\n                        tempQty--;\r\n                        if(tempQty < 1) tempQty = 1;\r\n                        tempTotalPrice = tempQty * item.price;\r\n                        let tempTotalPrice = item.totalPrice;\r\n                    }\r\n                    return {...item, quantity: tempQty, totalPrice: tempTotalPrice};\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n            state.data = tempCart;\r\n            storeInLocalStorage(state.data);\r\n        },\r\n        \r\n         // Recalculate totalAmount and totalItems\r\n         \r\n        \r\n        getCartTotal(state){\r\n            state.totalAmount = state.data.reduce((cartTotal, cartItem) => {\r\n                return cartTotal += cartItem.totalPrice;\r\n            }, 0);\r\n            state.totalItems = state.data.length;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {addToCart, removeFromCart, toggleCartQty, getCartTotal, clearCart,setCartTotal,} = cartSlice.actions;\r\nexport default cartSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}